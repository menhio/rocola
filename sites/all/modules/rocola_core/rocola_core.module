<?php

require '/home/mazpes5/www/rocola/sites/all/libraries/vendor/autoload.php';

/*
 * Implements hook_menu()
 */

function rocola_core_menu() {

  $items['spotify/playlist'] = array(
    'title' => 'La Mona Jukebox',
    'page callback' => 'playlist_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['spotify/auth'] = array(
    'title' => 'La Mona Jukebox - Auth',
    'page callback' => 'auth_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['spotify/playlist/queue/%/%'] = array(
    'title' => 'La Mona Rocks',
    'description' => 'Your song has been successfully queued',
    'page callback' => 'queue_page',
    'page arguments' => array(3, 4, 5),
    'access arguments' => array('access content'),
  );
  
  $items['admin/config/rocola/manage'] = array(
    'title' => 'My Rocola Settings',
    'description' => 'Manage My Rocola Settings',
    'access arguments' => array('access administration pages'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rocola_core_form'),
  );
  
  return $items;
}

function rocola_core_form($form, &$form_state){
  
  $form = array();
  
  $form['overview'] = array(
    '#markup' => t('This interface allows administrators to manage Spotify API.'),
    '#prefix' => '<p>',
    '#suffix' => '</p>',
  );
  /*
   * View Tab
   */
  $form['client_id'] = array(
    '#title' => t('CLIENT ID'),
    '#description' => t('Use your client id.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('spotify_client_id' ,''),
  );
  
  $form['client_secret'] = array(
    '#title' => t('CLIENT SECRET'),
    '#description' => t('Use your client secret.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('spotify_client_secret' ,''),
  );
  
  $form['user_id'] = array(
    '#title' => t('USER ID'),
    '#description' => t('The Spotify User ID.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('spotify_user_id' ,''),
  );
  
  $form['playlist_id_selection'] = array(
    '#title' => t('Playlist Selection'),
    '#description' => t('The Playlist ID for selection.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('spotify_playlist_id_selection' ,''),
  );
  
  $form['playlist_id_queue'] = array(
    '#title' => t('Playlist Queue'),
    '#description' => t('The Playlist ID for playing.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('spotify_playlist_id_queue' ,''),
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  
  return $form;
}

function rocola_core_form_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  variable_set('spotify_client_id', $form_state['values']['client_id']);
  variable_set('spotify_client_secret', $form_state['values']['client_secret']);
  variable_set('spotify_user_id', $form_state['values']['user_id']);
  variable_set('spotify_playlist_id_selection', $form_state['values']['playlist_id_selection']);
  variable_set('spotify_playlist_id_queue', $form_state['values']['playlist_id_queue']);
  
  drupal_set_message(t('Your configuration has been saved.'));
  
  $client_id = variable_get('spotify_client_id');
  $client_secret = variable_get('spotify_client_secret');
  
  $session = new SpotifyWebAPI\Session(
      $client_id, $client_secret, 'http://mazpesca.com/rocola/spotify/auth'
  );

  $options = [
    'scope' => [
      'playlist-read-private',
      'user-read-private',
      'playlist-modify-private',
      'playlist-modify-public',
    ],
  ];

  header('Location: ' . $session->getAuthorizeUrl($options));
  die();
  
}

function  auth_page() {
  
  $client_id = variable_get('spotify_client_id');
  $client_secret = variable_get('spotify_client_secret');
  
  $session = new SpotifyWebAPI\Session($client_id, 
      $client_secret, 
      'http://mazpesca.com/rocola/spotify/auth');
  $api = new SpotifyWebAPI\SpotifyWebAPI();

  // Request a access token using the code from Spotify
  $session->requestAccessToken($_GET['code']);
  $accessToken = $session->getAccessToken();
  variable_set('spotify_token', $accessToken);
  
  // Set the access token on the API wrapper
  $api->setAccessToken($accessToken);

  $output = '';
  
  $output .= '<p>Clients can start adding some tracks!</p>';
  
  return $output;
}

function playlist_page() {
  
//  $output = '';
//  
//  $output .= '<h1>La Mona Rocks</h1>';
  
  angularjs_init_application('app');
  drupal_add_js(drupal_get_path('module', 'rocola_core') . '/js/app.js');
  
  $client_id = variable_get('spotify_client_id');
  $client_secret = variable_get('spotify_client_secret');
  $user_id = variable_get('spotify_user_id');
  $playlist_id_selection = variable_get('spotify_playlist_id_selection');
  $playlist_id_queue = variable_get('spotify_playlist_id_queue');
  $spotify_token = variable_get('spotify_token');
  
  /*
   * API SETTINGS
   */
  $session = new SpotifyWebAPI\Session($client_id, $client_secret);
  $api = new SpotifyWebAPI\SpotifyWebAPI();
  
  $session->requestCredentialsToken();
  $accessToken = $session->getAccessToken();
  $api->setAccessToken($accessToken);
  
  $playlistTracks = $api->getUserPlaylistTracks($user_id, $playlist_id_selection);
  /*
   * API SETTING END
   */
//  $output .= '<table class="table table-hover">';
//  $output .= '<tbody>';
  $tracks = array();
  foreach ($playlistTracks->items as $track) {
    $track = $track->track;
    $artist_name = $track->artists[0]->name;
    $track_name = $track->name;
    $track_id = $track->id;
    $album_img = $track->album->images[0]->url;
//    $output .= '<tr>';
//    $output .= '<td>';
//    $output .= '<h6>';
//    $output .= '<a href="' . 'spotify/playlist/queue/' . $user_id . '/' 
//        . $playlist_id_queue . '/' . $track_id . '">'; 
//    $output .= '<img src="' . $album_img . 
//        '" class="img-responsive img-thumbnail" '
//        . 'alt="" height="204" width="136"> ';
//    $output .= $artist_name . ' - ' . $track_name;
//    $output .= '</a>';
//    $output .= '</h6>';
//    $output .= '</td>';
//    $output .= '</tr>';
    $tracks[] = array(
      'track_id' => $track_id,
      'track' => $track,
      'track_name' => $track_name,
      'artist_name' => $artist_name,
      'album_img' => $album_img,
      'playlist_id_queue' => $playlist_id_queue,
      'user_id' => $user_id,
    );
  }
//  $output .= '</tbody>';
//  $output .= '</table>';
  
  drupal_add_js(array(
    'rocola_core' => array(
      'tracks' => $tracks,
    )
  ), 'setting');
  
  drupal_add_js(drupal_get_path('module', 'rocola_core') . '/js/trackController.js');

  return theme('rocola_tracks_page');
  
  //return $output;
  
}

/**
 * Implements hook_theme().
 */
function rocola_core_theme() {
  return array(
    'rocola_tracks_page' => array(
      'template' => '/theme/rocola-tracks-page',
      //'parameters' => array(),
    ),
  );
}

function queue_page($user_id, $playlist_id, $track_id) {
  $output = '';
  
  $client_id = variable_get('spotify_client_id');
  $client_secret = variable_get('spotify_client_secret');
  $user_id = variable_get('spotify_user_id');
  $playlist_id_selection = variable_get('spotify_playlist_id_selection');
  $playlist_id_queue = variable_get('spotify_playlist_id_queue');
  $spotify_token = variable_get('spotify_token');
  
  /*
   * API SETTINGS
   */
  $api2 = new \Audeio\Spotify\API();
  $song = $api2->getTrack($track_id);
  
  $session = new SpotifyWebAPI\Session($client_id, $client_secret);
  $api = new SpotifyWebAPI\SpotifyWebAPI();
  
  try {
    $api->setAccessToken($spotify_token);
    $playlistTracks = $api->getUserPlaylistTracks($user_id, $playlist_id);
    $track_num = $playlistTracks->total + 1;
  } catch (Exception $ex) {
    $output .= '<h4>' . 'Ask La Mona to generate a new token!</h4>';
  }
  
  try {
    $track = $api->addUserPlaylistTracks(
        $user_id, 
        $playlist_id, 
        [$track_id]);
    $output .= '<h2>You Rock Too!</h2>';
    $output .= '<p>';
    $output .= 'The song ' . $song . ' has been submitted.';
    $output .= '</p>';
    $output .= '<p>';
    $output .= 'Your song is number ' . $track_num . ' .';
    $output .= '</p>';
  } catch (Exception $e) {
    $output .= '<h4>' . 'API Error: ' . $e->getCode() . '</h4>';
  }
  /*
   * API SETTING END
   */
  
  return $output;
}